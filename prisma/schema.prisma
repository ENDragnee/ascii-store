generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  phoneNumber   String?
  name          String
  password      String
  role          Role

  products      Product[]
  orders        Orders[]
  userProfile   UserProfile?

  boughtTransactions Transaction[] @relation("UserBoughtTransactions")
  soldTransactions   Transaction[] @relation("UserSoldTransactions")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String?
  price         Float
  stockQuantity Int           @default(0)

  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])

  sellerId      String
  seller        User          @relation(fields: [sellerId], references: [id])

  currencyId    String
  currency      Currency      @relation(fields: [currencyId], references: [id])

  orderProducts OrderProduct[]
  media         ProductMedia[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([sellerId])
  @@index([categoryId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Currency {
  id            String         @id @default(cuid())
  code          CurrencyCode  @unique 
  name          String
  symbol        String
  products      Product[]
  transactions  Transaction[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Orders {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])

  orderProducts OrderProduct[]
  transactions  Transaction[]

  total         Float
  paymentDueDate DateTime
  status        OrderStatus    @default(PENDING)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
}

model OrderProduct {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)

  order     Orders   @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
  @@index([productId])
}

model Transaction {
  id          String   @id @default(cuid())

  buyerId     String
  buyer       User     @relation("UserBoughtTransactions", fields: [buyerId], references: [id])

  sellerId    String
  seller      User     @relation("UserSoldTransactions", fields: [sellerId], references: [id])

  amount      Float

  currencyId  String
  currency    Currency @relation(fields: [currencyId], references: [id])

  orderId     String?
  order       Orders?  @relation(fields: [orderId], references: [id])

  type        TransactionType
  status      TransactionStatus   @default(PENDING)
  paymentMethod PaymentMethod

  details     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([orderId])
}

model ProductMedia {
  id        String   @id @default(cuid())
  url       String
  type      MediaType
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        String   @id @default(cuid())
  bio       String?
  avatarUrl String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SELLER
  USER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  PAYMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum CurrencyCode {
  USD
  EUR
  ETB
}
